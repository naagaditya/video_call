{"version":3,"sources":["firebase.config.js","room/appendVideo.js","room/createNewConnection.js","room/Room.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","appendVideo","remoteStream","candidateId","remoteVideo","document","createElement","id","style","playsInline","autoplay","srcObject","getElementById","appendChild","configuration","createNewConnection","localStream","connection","RTCPeerConnection","getTracks","forEach","track","console","log","addTrack","MediaStream","sendChannel","createDataChannel","onopen","e","window","connectedCandidates","push","onclose","indexToRemove","indexOf","splice","remove","ontrack","event","streams","Room","a","navigator","mediaDevices","getUserMedia","video","audio","querySelector","openUserMedia","roomId","location","search","split","roomRef","collection","doc","RTCPeerConnections","myId","useEffect","addEventListener","preventDefault","returnValue","Object","keys","close","update","FieldValue","delete","createConnection","onicecandidate","candidate","arrayUnion","toJSON","onicegatheringstatechange","ev","target","iceGatheringState","includes","onicecandidateerror","errorText","createOffer","offer","type","sdp","setLocalDescription","updateCadidateArray","updateICEGathering","get","roomSnapshot","candidates","exists","data","totalCandiates","parseInt","length","onSnapshot","snapshot","myDataConnections","remoteOffer","RTCSessionDescription","setRemoteDescription","createAnswer","answer","candidateIndex","iceCandidate","RTCIceCandidate","addIceCandidate","currentRemoteDescription","iceCandidates","init","muted","autoPlay","width","maxWidth","App","createRoom","add","href","className","Button","variant","onClick","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d7d2e378.chunk.js","sourcesContent":["import firebase from 'firebase'\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDdzhAHhMQeAo4egpTbj3K-JiuV_InAFkU\",\n    authDomain: \"fir-rtc-8e4b2.firebaseapp.com\",\n    databaseURL: \"https://fir-rtc-8e4b2.firebaseio.com\",\n    projectId: \"fir-rtc-8e4b2\",\n    storageBucket: \"fir-rtc-8e4b2.appspot.com\",\n    messagingSenderId: \"159303557727\",\n    appId: \"1:159303557727:web:2ae59edac452b77736b1ea\",\n    measurementId: \"G-FWJYK5VF1B\"\n  };\n  firebase.initializeApp(firebaseConfig);\nconst db= firebase.firestore();\n\nexport default db;","const appendVideo = (remoteStream, candidateId) => {\n  const remoteVideo = document.createElement (\"video\");\n  remoteVideo.id = `video${candidateId}`;\n  remoteVideo.style = \"width: 100%;max-width:500px;\";\n  remoteVideo.playsInline = true;\n  remoteVideo.autoplay = true;\n  // remoteVideo.muted = true;\n  remoteVideo.srcObject = remoteStream;\n  document.getElementById('room').appendChild(remoteVideo);\n}\n\nexport default appendVideo;","import appendVideo from './appendVideo'\nconst configuration = {\"iceServers\":[{\"urls\":[\"stun:turn2.l.google.com\"]}]};\n\nconst createNewConnection = (localStream, candidateId) => {\n  const connection = new RTCPeerConnection(configuration);\n  localStream && localStream.getTracks().forEach(track => {\n    console.log('adding track in connection');\n    connection.addTrack(track, localStream);\n  });\n  const remoteStream = new MediaStream();\n  const sendChannel = connection.createDataChannel(\"sendChannel\");\n  sendChannel.onopen = e => {\n    console.log(\"open!!!!\", candidateId);\n    window.connectedCandidates.push(`${candidateId}`);\n    appendVideo(remoteStream, candidateId);\n  };\n  sendChannel.onclose = e => {\n    console.log(\"close!!!!\", candidateId);\n    const indexToRemove = window.connectedCandidates.indexOf(`${candidateId}`);\n    window.connectedCandidates.splice(indexToRemove, 1);\n    document.getElementById(`video${candidateId}`).remove();\n  }\n  connection.ontrack = event => {\n    event.streams[0].getTracks().forEach(track => {\n      remoteStream.addTrack(track);\n    });\n  }\n  return connection;\n}\nexport default createNewConnection;","import React, { useEffect } from 'react';\nimport db from '../firebase.config';\nimport createNewConnection from './createNewConnection';\nimport firebase from 'firebase'\n\nexport default function Room() {\n  window.connectedCandidates = [];\n  let localStream;\n  const openUserMedia = async () => {\n    localStream = await navigator.mediaDevices.getUserMedia(\n      {video: true, audio: true});\n    document.querySelector('#localVideo').srcObject = localStream;\n  }\n  openUserMedia();\n  const roomId = window.location.search.split('=')[1];\n  const roomRef = db.collection('rooms').doc(`${roomId}`);\n  const RTCPeerConnections = {};\n  let myId = 0;\n  useEffect(() => {\n    window.addEventListener('beforeunload', async (e) => {\n      e.preventDefault();\n      e.returnValue = '';\n      for (const candidateId of Object.keys(RTCPeerConnections)) {\n        RTCPeerConnections[candidateId].close();\n        await roomRef.update({\n          [`${candidateId}.${myId}`]: firebase.firestore.FieldValue.delete()\n        });\n      }\n      await roomRef.update({\n        [myId]: firebase.firestore.FieldValue.delete()\n      });\n    });\n  },[]);\n  const createConnection = async (candidateId) => {\n    const connection = createNewConnection(localStream, candidateId);\n    RTCPeerConnections[candidateId] = connection;\n    connection.onicecandidate = async e =>  {\n      if (e.candidate) {\n        await roomRef.update({\n          [`${candidateId}.${myId}.candidate_for_${candidateId}`]: firebase.firestore.FieldValue.arrayUnion(e.candidate.toJSON())\n        });\n      }\n    }\n    connection.onicegatheringstatechange = async ev => {\n      if (ev.target.iceGatheringState === 'complete' && !window.connectedCandidates.includes(candidateId)) {\n        await roomRef.update({\n          [`${candidateId}.${myId}.iceGatheringComplete_for_${myId}`]: true\n        });\n      }\n    }\n    connection.onicecandidateerror = (e) => {console.log(e.errorText)}\n    const offer = await connection.createOffer();\n    await roomRef.update({\n      [`${candidateId}.${myId}`]: {\n        offer: {\n          type: offer.type,\n          sdp: offer.sdp\n        }\n      }\n    });\n    connection.setLocalDescription(offer);\n    console.log('step 1: offer created and updated');\n  }\n  const updateCadidateArray = async (candidate, candidateId) => {\n    if (candidate) {\n      await roomRef.update({\n        [`${myId}.${candidateId}.candidate_for_${candidateId}`]: firebase.firestore.FieldValue.arrayUnion(candidate.toJSON())\n      });\n    }\n  }\n  const updateICEGathering = async (iceGatheringState, candidateId) => {\n    if (iceGatheringState === 'complete' && !window.connectedCandidates.includes(candidateId)) {\n      await roomRef.update({\n        [`${myId}.${candidateId}.iceGatheringComplete_for_${myId}`]: true\n      });\n    }\n  }\n  const init = async () => {\n    const roomSnapshot = await roomRef.get();\n    const candidates = roomSnapshot.exists && roomSnapshot.data();\n    const totalCandiates = parseInt(Object.keys(candidates).length);\n    if (totalCandiates) {\n      myId = parseInt(Object.keys(candidates)[totalCandiates - 1]) + 1;\n      Object.keys(roomSnapshot.data()).forEach(createConnection);\n    }\n    await roomRef.update({\n      [myId]: {}\n    });\n    roomRef.onSnapshot(async snapshot => {\n      if (snapshot && snapshot.data()) {\n        // search offer, consume offer and create answer\n        const myDataConnections = snapshot.data()[myId];\n        for (const candidateId of Object.keys(myDataConnections)) {\n          if (!window.connectedCandidates.includes(candidateId)) {\n            const data = myDataConnections[candidateId];\n            if (data && data.offer && !RTCPeerConnections[candidateId]) {\n              const offer = data.offer;\n              const connection = createNewConnection(localStream, candidateId);\n              RTCPeerConnections[candidateId] = connection;\n              connection.onicecandidate = e =>  {\n                updateCadidateArray(e.candidate, candidateId);\n              }\n              connection.onicegatheringstatechange = ev => {\n                updateICEGathering(ev.target.iceGatheringState, candidateId);\n              }\n              const remoteOffer = new RTCSessionDescription(offer);\n              await connection.setRemoteDescription(remoteOffer);\n              const answer = await connection.createAnswer()\n              await connection.setLocalDescription(answer);\n              await roomRef.update({\n                [`${myId}.${candidateId}`]: {\n                  answer: {\n                    type: answer.type,\n                    sdp: answer.sdp\n                  }\n                }\n              });\n              console.log('step 2: set offer created answer and updated answer');\n            }\n            if (data && data[`iceGatheringComplete_for_${myId}`] && data[`iceGatheringComplete_for_${candidateId}`]) {\n              // this is use to initiate trying candidate pairs\n              await roomRef.update({\n                [`${myId}.${candidateId}.try_canditate`]: 0,\n                [`${myId}.${candidateId}.iceGatheringComplete_for_${myId}`]: false,\n                [`${myId}.${candidateId}.iceGatheringComplete_for_${candidateId}`]: false,\n              });        \n            }\n            if (data && data[`try_canditate`] >= 0 && !data['try_canditate_start'] && !window.connectedCandidates.includes(candidateId)) {\n              const candidateIndex = data[`try_canditate`];\n              const iceCandidate = data[`candidate_for_${myId}`][candidateIndex];  \n              if (iceCandidate) {\n                const candidate = new RTCIceCandidate(iceCandidate);\n                await RTCPeerConnections[candidateId].addIceCandidate(candidate);\n                console.log('tried ', candidateIndex);\n              }\n              await roomRef.update({\n                [`${myId}.${candidateId}.try_canditate_start`]: true\n              }); \n            }\n          }\n        }\n        // search answer, consume answer and setRemoteDescription\n        for (const candidateId of Object.keys(RTCPeerConnections)) {\n          const connection = RTCPeerConnections[candidateId];\n          const data = snapshot.data()[candidateId][myId];\n          if (!connection.currentRemoteDescription && data && data.answer) {\n            const answer = new RTCSessionDescription(data.answer);\n            await connection.setRemoteDescription(answer);\n            console.log('Step 3: Got the answer and set the answer to remote');\n          }\n          if ( data && data[`try_canditate_start`] && !window.connectedCandidates.includes(candidateId)) {\n            const candidateIndex = data[`try_canditate`];\n            const iceCandidates = data[`candidate_for_${myId}`] || [];\n            for (const iceCandidate of iceCandidates) {\n              if (!window.connectedCandidates.includes(candidateId) && iceCandidate) {\n                const candidate = new RTCIceCandidate(iceCandidate);\n                await connection.addIceCandidate(candidate);\n                console.log('tried ', candidateIndex);\n              }\n            }\n            if (!window.connectedCandidates.includes(candidateId) && candidateIndex < data[`candidate_for_${candidateId}`].length) {\n              await roomRef.update({\n                [`${candidateId}.${myId}.try_canditate`]: candidateIndex + 1,\n                [`${candidateId}.${myId}.try_canditate_start`]: false\n              }); \n            }\n          }\n        }\n      }\n    });\n  }\n  init();\n  return (\n    <div id=\"room\">\n      <video id=\"localVideo\" muted autoPlay playsInline style={{width: '100%', maxWidth: '500px'}}></video>\n    </div>\n  );\n}","import { Button } from 'react-bootstrap';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Room from './room/Room';\nimport db from './firebase.config';\n\nfunction App() {\n  const roomId = window.location.search.split('=')[1];\n  if (roomId) {\n    return <Room/>\n  }\n  const createRoom = async () => {\n    const roomRef = await db.collection('rooms').add({});\n    window.location.href = `${window.location.href}?roomId=${roomRef.id}`;\n  }\n  return (\n    <div className=\"App\">\n      <Button\n        variant=\"primary\"\n        onClick={createRoom}>\n        Create Room →\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}