{"version":3,"sources":["firebase.config.js","room/appendVideo.js","room/createNewConnection.js","room/Room.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","appendVideo","remoteStream","candidateId","remoteVideo","document","createElement","id","style","playsInline","autoplay","srcObject","getElementById","appendChild","configuration","createNewConnection","localStream","connection","RTCPeerConnection","getTracks","forEach","track","console","log","addTrack","MediaStream","sendChannel","createDataChannel","onopen","e","window","connectedCandidates","push","onclose","indexToRemove","indexOf","splice","remove","ontrack","event","streams","myConnection","Room","a","navigator","mediaDevices","getUserMedia","video","audio","querySelector","openUserMedia","roomId","location","search","split","roomRef","collection","doc","RTCPeerConnections","myId","useEffect","addEventListener","preventDefault","returnValue","Object","keys","close","update","FieldValue","delete","createConnection","onicecandidate","candidate","arrayUnion","toJSON","onicegatheringstatechange","ev","target","iceGatheringState","includes","onicecandidateerror","errorText","createOffer","offer","type","sdp","setLocalDescription","updateCadidateArray","updateICEGathering","resolveAfter2Seconds","Promise","resolve","setTimeout","get","roomSnapshot","candidates","exists","data","totalCandiates","parseInt","length","onSnapshot","snapshot","myDataConnections","remoteOffer","RTCSessionDescription","setRemoteDescription","createAnswer","answer","candidateIndex","iceCandidate","RTCIceCandidate","addIceCandidate","connectionState","currentRemoteDescription","iceCandidates","result","init","muted","autoPlay","width","maxWidth","App","createRoom","add","href","className","Button","variant","onClick","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0d252878.chunk.js","sourcesContent":["import firebase from 'firebase'\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDdzhAHhMQeAo4egpTbj3K-JiuV_InAFkU\",\n    authDomain: \"fir-rtc-8e4b2.firebaseapp.com\",\n    databaseURL: \"https://fir-rtc-8e4b2.firebaseio.com\",\n    projectId: \"fir-rtc-8e4b2\",\n    storageBucket: \"fir-rtc-8e4b2.appspot.com\",\n    messagingSenderId: \"159303557727\",\n    appId: \"1:159303557727:web:2ae59edac452b77736b1ea\",\n    measurementId: \"G-FWJYK5VF1B\"\n  };\n  firebase.initializeApp(firebaseConfig);\nconst db= firebase.firestore();\n\nexport default db;","const appendVideo = (remoteStream, candidateId) => {\n  const remoteVideo = document.createElement (\"video\");\n  remoteVideo.id = `video${candidateId}`;\n  remoteVideo.style = \"width: 100%;max-width:500px;\";\n  remoteVideo.playsInline = true;\n  remoteVideo.autoplay = true;\n  // remoteVideo.muted = true;\n  remoteVideo.srcObject = remoteStream;\n  document.getElementById('room').appendChild(remoteVideo);\n}\n\nexport default appendVideo;","import appendVideo from './appendVideo'\nconst configuration = {\"iceServers\":[{\"urls\":[\"stun:turn2.l.google.com\"]}]};\n\nconst createNewConnection = (localStream, candidateId) => {\n  const connection = new RTCPeerConnection(configuration);\n  localStream && localStream.getTracks().forEach(track => {\n    console.log('adding track in connection');\n    connection.addTrack(track, localStream);\n  });\n  const remoteStream = new MediaStream();\n  const sendChannel = connection.createDataChannel(\"sendChannel\");\n  sendChannel.onopen = e => {\n    console.log(\"open!!!!\", candidateId);\n    window.connectedCandidates.push(`${candidateId}`);\n    appendVideo(remoteStream, candidateId);\n  };\n  sendChannel.onclose = e => {\n    console.log(\"close!!!!\", candidateId);\n    const indexToRemove = window.connectedCandidates.indexOf(`${candidateId}`);\n    window.connectedCandidates.splice(indexToRemove, 1);\n    document.getElementById(`video${candidateId}`).remove();\n  }\n  connection.ontrack = event => {\n    event.streams[0].getTracks().forEach(track => {\n      remoteStream.addTrack(track);\n    });\n  }\n  window.myConnection = connection;\n  return connection;\n}\nexport default createNewConnection;","import React, { useEffect } from 'react';\nimport db from '../firebase.config';\nimport createNewConnection from './createNewConnection';\nimport firebase from 'firebase'\n\nexport default function Room() {\n  window.connectedCandidates = [];\n  let localStream;\n  const openUserMedia = async () => {\n    localStream = await navigator.mediaDevices.getUserMedia(\n      {video: true, audio: true});\n    document.querySelector('#localVideo').srcObject = localStream;\n  }\n  openUserMedia();\n  const roomId = window.location.search.split('=')[1];\n  const roomRef = db.collection('rooms').doc(`${roomId}`);\n  const RTCPeerConnections = {};\n  let myId = 0;\n  useEffect(() => {\n    window.addEventListener('beforeunload', async (e) => {\n      e.preventDefault();\n      e.returnValue = '';\n      for (const candidateId of Object.keys(RTCPeerConnections)) {\n        RTCPeerConnections[candidateId].close();\n        await roomRef.update({\n          [`${candidateId}.${myId}`]: firebase.firestore.FieldValue.delete()\n        });\n      }\n      await roomRef.update({\n        [myId]: firebase.firestore.FieldValue.delete()\n      });\n    });\n  },[]);\n  const createConnection = async (candidateId) => {\n    const connection = createNewConnection(localStream, candidateId);\n    RTCPeerConnections[candidateId] = connection;\n    connection.onicecandidate = async e =>  {\n      if (e.candidate) {\n        await roomRef.update({\n          [`${candidateId}.${myId}.candidate_for_${candidateId}`]: firebase.firestore.FieldValue.arrayUnion(e.candidate.toJSON())\n        });\n      }\n    }\n    connection.onicegatheringstatechange = async ev => {\n      if (ev.target.iceGatheringState === 'complete' && !window.connectedCandidates.includes(candidateId)) {\n        await roomRef.update({\n          [`${candidateId}.${myId}.iceGatheringComplete_for_${myId}`]: true\n        });\n      }\n    }\n    connection.onicecandidateerror = (e) => {console.log(e.errorText)}\n    const offer = await connection.createOffer();\n    await roomRef.update({\n      [`${candidateId}.${myId}`]: {\n        offer: {\n          type: offer.type,\n          sdp: offer.sdp\n        }\n      }\n    });\n    connection.setLocalDescription(offer);\n    console.log('step 1: offer created and updated');\n  }\n  const updateCadidateArray = async (candidate, candidateId) => {\n    if (candidate) {\n      await roomRef.update({\n        [`${myId}.${candidateId}.candidate_for_${candidateId}`]: firebase.firestore.FieldValue.arrayUnion(candidate.toJSON())\n      });\n    }\n  }\n  const updateICEGathering = async (iceGatheringState, candidateId) => {\n    if (iceGatheringState === 'complete' && !window.connectedCandidates.includes(candidateId)) {\n      await roomRef.update({\n        [`${myId}.${candidateId}.iceGatheringComplete_for_${myId}`]: true\n      });\n    }\n  }\n  const init = async () => {\n    const roomSnapshot = await roomRef.get();\n    const candidates = roomSnapshot.exists && roomSnapshot.data();\n    const totalCandiates = parseInt(Object.keys(candidates).length);\n    if (totalCandiates) {\n      myId = parseInt(Object.keys(candidates)[totalCandiates - 1]) + 1;\n      Object.keys(roomSnapshot.data()).forEach(createConnection);\n    }\n    await roomRef.update({\n      [myId]: {}\n    });\n    roomRef.onSnapshot(async snapshot => {\n      if (snapshot && snapshot.data()) {\n        // search offer, consume offer and create answer\n        const myDataConnections = snapshot.data()[myId];\n        for (const candidateId of Object.keys(myDataConnections)) {\n          if (!window.connectedCandidates.includes(candidateId)) {\n            const data = myDataConnections[candidateId];\n            if (data && data.offer && !RTCPeerConnections[candidateId]) {\n              const offer = data.offer;\n              const connection = createNewConnection(localStream, candidateId);\n              RTCPeerConnections[candidateId] = connection;\n              connection.onicecandidate = e =>  {\n                updateCadidateArray(e.candidate, candidateId);\n              }\n              connection.onicegatheringstatechange = ev => {\n                updateICEGathering(ev.target.iceGatheringState, candidateId);\n              }\n              const remoteOffer = new RTCSessionDescription(offer);\n              await connection.setRemoteDescription(remoteOffer);\n              const answer = await connection.createAnswer()\n              await connection.setLocalDescription(answer);\n              await roomRef.update({\n                [`${myId}.${candidateId}`]: {\n                  answer: {\n                    type: answer.type,\n                    sdp: answer.sdp\n                  }\n                }\n              });\n              console.log('step 2: set offer created answer and updated answer');\n            }\n            if (data && data[`iceGatheringComplete_for_${myId}`] && data[`iceGatheringComplete_for_${candidateId}`]) {\n              // this is use to initiate trying candidate pairs\n              await roomRef.update({\n                [`${myId}.${candidateId}.try_canditate`]: 0,\n                [`${myId}.${candidateId}.iceGatheringComplete_for_${myId}`]: false,\n                [`${myId}.${candidateId}.iceGatheringComplete_for_${candidateId}`]: false,\n              });        \n            }\n            if (data && data[`try_canditate`] >= 0 && !data['try_canditate_start'] && !window.connectedCandidates.includes(candidateId)) {\n              const candidateIndex = data[`try_canditate`];\n              const iceCandidate = data[`candidate_for_${myId}`][candidateIndex];  \n              if (iceCandidate) {\n                const candidate = new RTCIceCandidate(iceCandidate);\n                await RTCPeerConnections[candidateId].addIceCandidate(candidate);\n                const result = await resolveAfter2Seconds();\n                console.log('tried ', candidateIndex, RTCPeerConnections[candidateId].connectionState);\n              }\n              await roomRef.update({\n                [`${myId}.${candidateId}.try_canditate_start`]: true\n              }); \n            }\n          }\n        }\n        // search answer, consume answer and setRemoteDescription\n        for (const candidateId of Object.keys(RTCPeerConnections)) {\n          const connection = RTCPeerConnections[candidateId];\n          const data = snapshot.data()[candidateId][myId];\n          if (!connection.currentRemoteDescription && data && data.answer) {\n            const answer = new RTCSessionDescription(data.answer);\n            await connection.setRemoteDescription(answer);\n            console.log('Step 3: Got the answer and set the answer to remote');\n          }\n          if ( data && data[`try_canditate_start`] && !window.connectedCandidates.includes(candidateId)) {\n            const candidateIndex = data[`try_canditate`];\n            const iceCandidates = data[`candidate_for_${myId}`] || [];\n            for (const iceCandidate of iceCandidates) {\n              if (!window.connectedCandidates.includes(candidateId) && iceCandidate) {\n                const candidate = new RTCIceCandidate(iceCandidate);\n                await connection.addIceCandidate(candidate);\n                console.log('tried ', candidateIndex);\n                const result = await resolveAfter2Seconds();\n                console.log(result, connection.connectionState);\n              }\n            }\n            if (!window.connectedCandidates.includes(candidateId) && candidateIndex + 1 < data[`candidate_for_${candidateId}`].length) {\n              await roomRef.update({\n                [`${candidateId}.${myId}.try_canditate`]: candidateIndex + 1,\n                [`${candidateId}.${myId}.try_canditate_start`]: false\n              }); \n            }\n          }\n        }\n      }\n    });\n  }\n  function resolveAfter2Seconds() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve('resolved');\n      }, 2000);\n    });\n  }\n  init();\n  return (\n    <div id=\"room\">\n      <video id=\"localVideo\" muted autoPlay playsInline style={{width: '100%', maxWidth: '500px'}}></video>\n    </div>\n  );\n}","import { Button } from 'react-bootstrap';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Room from './room/Room';\nimport db from './firebase.config';\n\nfunction App() {\n  const roomId = window.location.search.split('=')[1];\n  if (roomId) {\n    return <Room/>\n  }\n  const createRoom = async () => {\n    const roomRef = await db.collection('rooms').add({});\n    window.location.href = `${window.location.href}?roomId=${roomRef.id}`;\n  }\n  return (\n    <div className=\"App\">\n      <Button\n        variant=\"primary\"\n        onClick={createRoom}>\n        Create Room →\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}