{"version":3,"sources":["firebase.config.js","room/appendVideo.js","room/createNewConnection.js","room/Room.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","appendVideo","remoteStream","remoteVideo","document","createElement","style","playsInline","autoplay","srcObject","getElementById","appendChild","configuration","createNewConnection","localStream","connection","RTCPeerConnection","getTracks","forEach","track","console","log","addTrack","MediaStream","createDataChannel","onopen","e","ontrack","event","streams","Room","a","navigator","mediaDevices","getUserMedia","video","audio","querySelector","openUserMedia","roomId","window","location","search","split","roomRef","collection","doc","RTCPeerConnections","myId","createConnection","candidateId","onicecandidate","candidate","update","FieldValue","arrayUnion","toJSON","onicecandidateerror","errorText","createOffer","offer","type","sdp","setLocalDescription","get","roomSnapshot","candidates","exists","data","totalCandiates","parseInt","Object","keys","length","onSnapshot","snapshot","myDataConnections","remoteOffer","RTCSessionDescription","setRemoteDescription","createAnswer","answer","some","iceCandidate","connectionState","RTCIceCandidate","addIceCandidate","currentRemoteDescription","init","id","muted","autoPlay","width","maxWidth","App","createRoom","add","href","className","Button","variant","onClick","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0eccd979.chunk.js","sourcesContent":["import firebase from 'firebase'\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDdzhAHhMQeAo4egpTbj3K-JiuV_InAFkU\",\n    authDomain: \"fir-rtc-8e4b2.firebaseapp.com\",\n    databaseURL: \"https://fir-rtc-8e4b2.firebaseio.com\",\n    projectId: \"fir-rtc-8e4b2\",\n    storageBucket: \"fir-rtc-8e4b2.appspot.com\",\n    messagingSenderId: \"159303557727\",\n    appId: \"1:159303557727:web:2ae59edac452b77736b1ea\",\n    measurementId: \"G-FWJYK5VF1B\"\n  };\n  firebase.initializeApp(firebaseConfig);\nconst db= firebase.firestore();\n\nexport default db;","const appendVideo = (remoteStream) => {\n  const remoteVideo = document.createElement (\"video\");\n  remoteVideo.style = \"width: 100%;max-width:500px;\"\n  remoteVideo.playsInline = true;\n  remoteVideo.autoplay = true;\n  remoteVideo.srcObject = remoteStream;\n  document.getElementById('room').appendChild(remoteVideo);\n}\n\nexport default appendVideo;","import appendVideo from './appendVideo'\nconst configuration = {\"iceServers\":[{\"urls\":[\"stun:turn2.l.google.com\"]}]};\n\nconst createNewConnection = (localStream) => {\n  const connection = new RTCPeerConnection(configuration);\n  localStream && localStream.getTracks().forEach(track => {\n    console.log('adding track in connection');\n    connection.addTrack(track, localStream);\n  });\n  const remoteStream = new MediaStream();\n  const sendChannel = connection.createDataChannel(\"sendChannel\");\n  sendChannel.onopen = e => {\n    console.log(\"open!!!!\");\n    appendVideo(remoteStream);\n  };\n  connection.ontrack = event => {\n    event.streams[0].getTracks().forEach(track => {\n      remoteStream.addTrack(track);\n    });\n  }\n  return connection;\n}\nexport default createNewConnection;","import React from 'react';\nimport db from '../firebase.config';\nimport createNewConnection from './createNewConnection';\nimport firebase from 'firebase'\n\nexport default function Room() {\n  let localStream;\n  const openUserMedia = async () => {\n    localStream = await navigator.mediaDevices.getUserMedia(\n      {video: true, audio: true});\n    document.querySelector('#localVideo').srcObject = localStream;\n  }\n  openUserMedia();\n  const roomId = window.location.search.split('=')[1];\n  const roomRef = db.collection('rooms').doc(`${roomId}`);\n  const RTCPeerConnections = {};\n  let myId = 0;\n  const createConnection = async (candidateId) => {\n    const connection = createNewConnection(localStream);\n    RTCPeerConnections[candidateId] = connection;\n    connection.onicecandidate = async e =>  {\n      console.log(\" NEW ice candidate!! \", e.candidate );\n      if (e.candidate) {\n        await roomRef.update({\n          [`${candidateId}.${myId}.candidate_for_${myId}`]: firebase.firestore.FieldValue.arrayUnion(e.candidate.toJSON())\n        });\n      }\n    }\n    connection.onicecandidateerror = (e) => {console.log(e.errorText)}\n    const offer = await connection.createOffer();\n    await roomRef.update({\n      [`${candidateId}.${myId}`]: {\n        offer: {\n          type: offer.type,\n          sdp: offer.sdp\n        }\n      }\n    });\n    connection.setLocalDescription(offer);\n    console.log('step 1: offer created and updated');\n  }\n  const init = async () => {\n    const roomSnapshot = await roomRef.get();\n    const candidates = roomSnapshot.exists && roomSnapshot.data();\n    const totalCandiates = parseInt(Object.keys(candidates).length);\n    if (totalCandiates) {\n      myId = parseInt(Object.keys(candidates)[totalCandiates - 1]) + 1;\n      Object.keys(roomSnapshot.data()).forEach(createConnection);\n    }\n    await roomRef.update({\n      [myId]: {}\n    });\n    roomRef.onSnapshot(async snapshot => {\n      // search offer, consume offer and create answer\n      const myDataConnections = snapshot.data()[myId];\n      Object.keys(myDataConnections).forEach(async candidateId => {\n        const data = myDataConnections[candidateId];\n        if (data && data.offer && !RTCPeerConnections[candidateId]) {\n          const offer = data.offer;\n          const connection = createNewConnection(localStream);\n          RTCPeerConnections[candidateId] = connection;\n          connection.onicecandidate = async e =>  {\n            console.log(\" NEW ice candidate!! \", e.candidate );\n            if (e.candidate) {\n              await roomRef.update({\n                [`${myId}.${candidateId}.candidate_for_${myId}`]: firebase.firestore.FieldValue.arrayUnion(e.candidate.toJSON())\n              });\n            }\n          }\n          const remoteOffer = new RTCSessionDescription(offer);\n          await connection.setRemoteDescription(remoteOffer);\n          const answer = await connection.createAnswer()\n          await connection.setLocalDescription(answer);\n          await roomRef.update({\n            [`${myId}.${candidateId}`]: {\n              answer: {\n                type: answer.type,\n                sdp: answer.sdp\n              }\n            }\n          });\n          console.log('step 2: set offer created answer and updated answer');\n        }\n        if ( data && data[`candidate_for_${myId}`]) {\n          const iceCandidates = data[`candidate_for_${myId}`];\n          iceCandidates.some(async iceCandidate => {\n            if (RTCPeerConnections[candidateId].connectionState === 'connected') {\n              return true;\n            }\n            const candidate = new RTCIceCandidate(iceCandidate);\n            await RTCPeerConnections[candidateId].addIceCandidate(candidate);\n          });\n        }\n      });\n      // search answer, consume answer and setRemoteDescription\n      Object.keys(RTCPeerConnections).forEach(async candidateId => {\n        const connection = RTCPeerConnections[candidateId];\n        const data = snapshot.data()[candidateId][myId];\n        if (!connection.currentRemoteDescription && data && data.answer) {\n          const answer = new RTCSessionDescription(data.answer);\n          await connection.setRemoteDescription(answer);\n          console.log('Step 3: Got the answer and set the answer to remote');\n        }\n        if ( data && data[`candidate_for_${candidateId}`]) {\n          const iceCandidates = data[`candidate_for_${candidateId}`];\n          iceCandidates.some(async iceCandidate => {\n            if (connection.connectionState === 'connected') {\n              return true;\n            }\n            const candidate = new RTCIceCandidate(iceCandidate);\n            await connection.addIceCandidate(candidate);\n          });\n        }\n      });\n    });\n  }\n  init();\n  return (\n    <div id=\"room\">\n      <video id=\"localVideo\" muted autoPlay playsInline style={{width: '100%', maxWidth: '500px'}}></video>\n    </div>\n  );\n}","import { Button } from 'react-bootstrap';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Room from './room/Room';\nimport db from './firebase.config';\n\nfunction App() {\n  const roomId = window.location.search.split('=')[1];\n  if (roomId) {\n    return <Room/>\n  }\n  const createRoom = async () => {\n    const roomRef = await db.collection('rooms').add({});\n    window.location.href = `${window.location.href}?roomId=${roomRef.id}`\n  }\n  return (\n    <div className=\"App\">\n      <Button\n        variant=\"primary\"\n        onClick={createRoom}>\n        Create Room →\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}