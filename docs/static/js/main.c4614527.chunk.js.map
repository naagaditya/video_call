{"version":3,"sources":["firebase.config.js","room/appendVideo.js","room/createNewConnection.js","room/Room.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","appendVideo","remoteStream","remoteVideo","document","createElement","style","playsInline","autoplay","srcObject","getElementById","appendChild","configuration","createNewConnection","localStream","connection","RTCPeerConnection","getTracks","forEach","track","console","log","addTrack","MediaStream","createDataChannel","onopen","e","ontrack","event","streams","Room","a","navigator","mediaDevices","getUserMedia","video","audio","querySelector","openUserMedia","roomId","window","location","search","split","roomRef","collection","doc","RTCPeerConnections","myId","createConnection","candidateId","onicecandidate","candidate","update","FieldValue","arrayUnion","toJSON","onicegatheringstatechange","ev","target","iceGatheringState","connectionState","onicecandidateerror","errorText","createOffer","offer","type","sdp","setLocalDescription","get","roomSnapshot","candidates","exists","data","totalCandiates","parseInt","Object","keys","length","onSnapshot","snapshot","myDataConnections","remoteOffer","RTCSessionDescription","setRemoteDescription","createAnswer","answer","candidateIndex","iceCandidate","RTCIceCandidate","addIceCandidate","currentRemoteDescription","iceCandidates","init","id","muted","autoPlay","width","maxWidth","App","createRoom","add","href","className","Button","variant","onClick","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c4614527.chunk.js","sourcesContent":["import firebase from 'firebase'\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDdzhAHhMQeAo4egpTbj3K-JiuV_InAFkU\",\n    authDomain: \"fir-rtc-8e4b2.firebaseapp.com\",\n    databaseURL: \"https://fir-rtc-8e4b2.firebaseio.com\",\n    projectId: \"fir-rtc-8e4b2\",\n    storageBucket: \"fir-rtc-8e4b2.appspot.com\",\n    messagingSenderId: \"159303557727\",\n    appId: \"1:159303557727:web:2ae59edac452b77736b1ea\",\n    measurementId: \"G-FWJYK5VF1B\"\n  };\n  firebase.initializeApp(firebaseConfig);\nconst db= firebase.firestore();\n\nexport default db;","const appendVideo = (remoteStream) => {\n  const remoteVideo = document.createElement (\"video\");\n  remoteVideo.style = \"width: 100%;max-width:500px;\"\n  remoteVideo.playsInline = true;\n  remoteVideo.autoplay = true;\n  remoteVideo.srcObject = remoteStream;\n  document.getElementById('room').appendChild(remoteVideo);\n}\n\nexport default appendVideo;","import appendVideo from './appendVideo'\nconst configuration = {\"iceServers\":[{\"urls\":[\"stun:turn2.l.google.com\"]}]};\n\nconst createNewConnection = (localStream) => {\n  const connection = new RTCPeerConnection(configuration);\n  localStream && localStream.getTracks().forEach(track => {\n    console.log('adding track in connection');\n    connection.addTrack(track, localStream);\n  });\n  const remoteStream = new MediaStream();\n  const sendChannel = connection.createDataChannel(\"sendChannel\");\n  sendChannel.onopen = e => {\n    console.log(\"open!!!!\");\n    appendVideo(remoteStream);\n  };\n  connection.ontrack = event => {\n    event.streams[0].getTracks().forEach(track => {\n      remoteStream.addTrack(track);\n    });\n  }\n  return connection;\n}\nexport default createNewConnection;","import React from 'react';\nimport db from '../firebase.config';\nimport createNewConnection from './createNewConnection';\nimport firebase from 'firebase'\n\nexport default function Room() {\n  let localStream;\n  const openUserMedia = async () => {\n    localStream = await navigator.mediaDevices.getUserMedia(\n      {video: true, audio: true});\n    document.querySelector('#localVideo').srcObject = localStream;\n  }\n  openUserMedia();\n  const roomId = window.location.search.split('=')[1];\n  const roomRef = db.collection('rooms').doc(`${roomId}`);\n  const RTCPeerConnections = {};\n  let myId = 0;\n  const createConnection = async (candidateId) => {\n    const connection = createNewConnection(localStream);\n    RTCPeerConnections[candidateId] = connection;\n    connection.onicecandidate = async e =>  {\n      if (e.candidate) {\n        await roomRef.update({\n          [`${candidateId}.${myId}.candidate_for_${myId}`]: firebase.firestore.FieldValue.arrayUnion(e.candidate.toJSON())\n        });\n      }\n    }\n    connection.onicegatheringstatechange = async ev => {\n      if (ev.target.iceGatheringState === 'complete' && connection.connectionState !== 'connected') {\n        await roomRef.update({\n          [`${candidateId}.${myId}.iceGatheringComplete_for_${myId}`]: true\n        });\n      }\n    }\n    connection.onicecandidateerror = (e) => {console.log(e.errorText)}\n    const offer = await connection.createOffer();\n    await roomRef.update({\n      [`${candidateId}.${myId}`]: {\n        offer: {\n          type: offer.type,\n          sdp: offer.sdp\n        }\n      }\n    });\n    connection.setLocalDescription(offer);\n    console.log('step 1: offer created and updated');\n  }\n  const init = async () => {\n    const roomSnapshot = await roomRef.get();\n    const candidates = roomSnapshot.exists && roomSnapshot.data();\n    const totalCandiates = parseInt(Object.keys(candidates).length);\n    if (totalCandiates) {\n      myId = parseInt(Object.keys(candidates)[totalCandiates - 1]) + 1;\n      Object.keys(roomSnapshot.data()).forEach(createConnection);\n    }\n    await roomRef.update({\n      [myId]: {}\n    });\n    roomRef.onSnapshot(async snapshot => {\n      // search offer, consume offer and create answer\n      const myDataConnections = snapshot.data()[myId];\n      Object.keys(myDataConnections).forEach(async candidateId => {\n        if (RTCPeerConnections[candidateId] && RTCPeerConnections[candidateId].connectionState === 'connected') {\n          return;\n        }\n        const data = myDataConnections[candidateId];\n        if (data && data.offer && !RTCPeerConnections[candidateId]) {\n          const offer = data.offer;\n          const connection = createNewConnection(localStream);\n          RTCPeerConnections[candidateId] = connection;\n          connection.onicecandidate = async e =>  {\n            if (e.candidate) {\n              await roomRef.update({\n                [`${myId}.${candidateId}.candidate_for_${myId}`]: firebase.firestore.FieldValue.arrayUnion(e.candidate.toJSON())\n              });\n            }\n          }\n          connection.onicegatheringstatechange = async ev => {\n            if (ev.target.iceGatheringState === 'complete' && connection.connectionState !== 'connected') {\n              await roomRef.update({\n                [`${myId}.${candidateId}.iceGatheringComplete_for_${myId}`]: true\n              });\n            }\n          }\n          const remoteOffer = new RTCSessionDescription(offer);\n          await connection.setRemoteDescription(remoteOffer);\n          const answer = await connection.createAnswer()\n          await connection.setLocalDescription(answer);\n          await roomRef.update({\n            [`${myId}.${candidateId}`]: {\n              answer: {\n                type: answer.type,\n                sdp: answer.sdp\n              }\n            }\n          });\n          console.log('step 2: set offer created answer and updated answer');\n        }\n        if (data && data[`iceGatheringComplete_for_${myId}`] && data[`iceGatheringComplete_for_${candidateId}`]) {\n          // this is use to initiate trying candidate pairs\n          await roomRef.update({\n            [`${myId}.${candidateId}.try_canditate`]: 0,\n            [`${myId}.${candidateId}.iceGatheringComplete_for_${myId}`]: false,\n            [`${myId}.${candidateId}.iceGatheringComplete_for_${candidateId}`]: false,\n          });        \n        }\n        if (data && data[`try_canditate`] >= 0 && !data['try_canditate_start']) {\n          const candidateIndex = data[`try_canditate`];\n          const iceCandidate = data[`candidate_for_${myId}`][candidateIndex];  \n          if (iceCandidate) {\n            const candidate = new RTCIceCandidate(iceCandidate);\n            await RTCPeerConnections[candidateId].addIceCandidate(candidate);   \n          }\n          await roomRef.update({\n            [`${myId}.${candidateId}.try_canditate_start`]: true\n          }); \n        }\n      });\n      // search answer, consume answer and setRemoteDescription\n      Object.keys(RTCPeerConnections).forEach(async candidateId => {\n        const connection = RTCPeerConnections[candidateId];\n        const data = snapshot.data()[candidateId][myId];\n        if (!connection.currentRemoteDescription && data && data.answer) {\n          const answer = new RTCSessionDescription(data.answer);\n          await connection.setRemoteDescription(answer);\n          console.log('Step 3: Got the answer and set the answer to remote');\n        }\n        if ( data && data[`try_canditate_start`]) {\n          const candidateIndex = data[`try_canditate`];\n          const iceCandidates = data[`candidate_for_${candidateId}`] || [];\n          for (const iceCandidate of iceCandidates) {\n            if (connection.connectionState === 'connected') {\n              console.log(\"connected\")\n              return true;\n            }\n            if (iceCandidate) {\n              const candidate = new RTCIceCandidate(iceCandidate);\n              await connection.addIceCandidate(candidate);\n            }\n          }\n          if (connection.connectionState !== 'connected' && candidateIndex < data[`candidate_for_${myId}`].length) {\n            await roomRef.update({\n              [`${candidateId}.${myId}.try_canditate`]: candidateIndex + 1,\n              [`${candidateId}.${myId}.try_canditate_start`]: false\n            }); \n          }\n        }\n      });\n    });\n  }\n  init();\n  return (\n    <div id=\"room\">\n      <video id=\"localVideo\" muted autoPlay playsInline style={{width: '100%', maxWidth: '500px'}}></video>\n    </div>\n  );\n}","import { Button } from 'react-bootstrap';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Room from './room/Room';\nimport db from './firebase.config';\n\nfunction App() {\n  const roomId = window.location.search.split('=')[1];\n  if (roomId) {\n    return <Room/>\n  }\n  const createRoom = async () => {\n    const roomRef = await db.collection('rooms').add({});\n    window.location.href = `${window.location.href}?roomId=${roomRef.id}`\n  }\n  return (\n    <div className=\"App\">\n      <Button\n        variant=\"primary\"\n        onClick={createRoom}>\n        Create Room →\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}