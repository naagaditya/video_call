{"version":3,"sources":["firebase.config.js","room/appendVideo.js","room/createNewConnection.js","room/Room.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","appendVideo","remoteStream","candidateId","remoteVideo","document","createElement","id","style","playsInline","autoplay","srcObject","getElementById","appendChild","configuration","createNewConnection","localStream","connection","RTCPeerConnection","getTracks","forEach","track","console","log","addTrack","MediaStream","sendChannel","createDataChannel","onopen","e","window","connectedCandidates","push","onclose","indexToRemove","indexOf","splice","remove","ontrack","event","streams","Room","a","navigator","mediaDevices","getUserMedia","video","audio","querySelector","openUserMedia","roomId","location","search","split","roomRef","collection","doc","RTCPeerConnections","myId","createConnection","onicecandidate","candidate","update","FieldValue","arrayUnion","toJSON","onicegatheringstatechange","ev","target","iceGatheringState","includes","onicecandidateerror","errorText","createOffer","offer","type","sdp","setLocalDescription","updateCadidateArray","updateICEGathering","get","roomSnapshot","candidates","exists","data","totalCandiates","parseInt","Object","keys","length","onSnapshot","snapshot","myDataConnections","remoteOffer","RTCSessionDescription","setRemoteDescription","createAnswer","answer","candidateIndex","iceCandidate","RTCIceCandidate","addIceCandidate","currentRemoteDescription","iceCandidates","init","muted","autoPlay","width","maxWidth","App","createRoom","add","href","className","Button","variant","onClick","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3eb4fbfb.chunk.js","sourcesContent":["import firebase from 'firebase'\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDdzhAHhMQeAo4egpTbj3K-JiuV_InAFkU\",\n    authDomain: \"fir-rtc-8e4b2.firebaseapp.com\",\n    databaseURL: \"https://fir-rtc-8e4b2.firebaseio.com\",\n    projectId: \"fir-rtc-8e4b2\",\n    storageBucket: \"fir-rtc-8e4b2.appspot.com\",\n    messagingSenderId: \"159303557727\",\n    appId: \"1:159303557727:web:2ae59edac452b77736b1ea\",\n    measurementId: \"G-FWJYK5VF1B\"\n  };\n  firebase.initializeApp(firebaseConfig);\nconst db= firebase.firestore();\n\nexport default db;","const appendVideo = (remoteStream, candidateId) => {\n  const remoteVideo = document.createElement (\"video\");\n  remoteVideo.id = `video${candidateId}`;\n  remoteVideo.style = \"width: 100%;max-width:500px;\";\n  remoteVideo.playsInline = true;\n  remoteVideo.autoplay = true;\n  remoteVideo.srcObject = remoteStream;\n  document.getElementById('room').appendChild(remoteVideo);\n}\n\nexport default appendVideo;","import appendVideo from './appendVideo'\nconst configuration = {\"iceServers\":[{\"urls\":[\"stun:turn2.l.google.com\"]}]};\n\nconst createNewConnection = (localStream, candidateId) => {\n  const connection = new RTCPeerConnection(configuration);\n  localStream && localStream.getTracks().forEach(track => {\n    console.log('adding track in connection');\n    connection.addTrack(track, localStream);\n  });\n  const remoteStream = new MediaStream();\n  const sendChannel = connection.createDataChannel(\"sendChannel\");\n  sendChannel.onopen = e => {\n    console.log(\"open!!!!\", candidateId);\n    window.connectedCandidates.push(`${candidateId}`);\n    appendVideo(remoteStream, candidateId);\n  };\n  sendChannel.onclose = e => {\n    console.log(\"close!!!!\", candidateId);\n    const indexToRemove = window.connectedCandidates.indexOf(`${candidateId}`);\n    window.connectedCandidates.splice(indexToRemove, 1);\n    document.getElementById(`video${candidateId}`).remove();\n  }\n  connection.ontrack = event => {\n    event.streams[0].getTracks().forEach(track => {\n      remoteStream.addTrack(track);\n    });\n  }\n  return connection;\n}\nexport default createNewConnection;","import React from 'react';\nimport db from '../firebase.config';\nimport createNewConnection from './createNewConnection';\nimport firebase from 'firebase'\n\nexport default function Room() {\n  window.connectedCandidates = [];\n  let localStream;\n  const openUserMedia = async () => {\n    localStream = await navigator.mediaDevices.getUserMedia(\n      {video: true, audio: true});\n    document.querySelector('#localVideo').srcObject = localStream;\n  }\n  openUserMedia();\n  const roomId = window.location.search.split('=')[1];\n  const roomRef = db.collection('rooms').doc(`${roomId}`);\n  const RTCPeerConnections = {};\n  let myId = 0;\n  const createConnection = async (candidateId) => {\n    const connection = createNewConnection(localStream, candidateId);\n    RTCPeerConnections[candidateId] = connection;\n    connection.onicecandidate = async e =>  {\n      if (e.candidate) {\n        await roomRef.update({\n          [`${candidateId}.${myId}.candidate_for_${myId}`]: firebase.firestore.FieldValue.arrayUnion(e.candidate.toJSON())\n        });\n      }\n    }\n    connection.onicegatheringstatechange = async ev => {\n      if (ev.target.iceGatheringState === 'complete' && !window.connectedCandidates.includes(candidateId)) {\n        await roomRef.update({\n          [`${candidateId}.${myId}.iceGatheringComplete_for_${myId}`]: true\n        });\n      }\n    }\n    connection.onicecandidateerror = (e) => {console.log(e.errorText)}\n    const offer = await connection.createOffer();\n    await roomRef.update({\n      [`${candidateId}.${myId}`]: {\n        offer: {\n          type: offer.type,\n          sdp: offer.sdp\n        }\n      }\n    });\n    connection.setLocalDescription(offer);\n    console.log('step 1: offer created and updated');\n  }\n  const updateCadidateArray = async (candidate, candidateId) => {\n    if (candidate) {\n      await roomRef.update({\n        [`${myId}.${candidateId}.candidate_for_${myId}`]: firebase.firestore.FieldValue.arrayUnion(candidate.toJSON())\n      });\n    }\n  }\n  const updateICEGathering = async (iceGatheringState, candidateId) => {\n    if (iceGatheringState === 'complete' && !window.connectedCandidates.includes(candidateId)) {\n      await roomRef.update({\n        [`${myId}.${candidateId}.iceGatheringComplete_for_${myId}`]: true\n      });\n    }\n  }\n  const init = async () => {\n    const roomSnapshot = await roomRef.get();\n    const candidates = roomSnapshot.exists && roomSnapshot.data();\n    const totalCandiates = parseInt(Object.keys(candidates).length);\n    if (totalCandiates) {\n      myId = parseInt(Object.keys(candidates)[totalCandiates - 1]) + 1;\n      Object.keys(roomSnapshot.data()).forEach(createConnection);\n    }\n    await roomRef.update({\n      [myId]: {}\n    });\n    roomRef.onSnapshot(async snapshot => {\n      if (snapshot && snapshot.data()) {\n        // search offer, consume offer and create answer\n        const myDataConnections = snapshot.data()[myId];\n        for (const candidateId of Object.keys(myDataConnections)) {\n          if (RTCPeerConnections[candidateId] && window.connectedCandidates.includes(candidateId)) {\n            return;\n          }\n          const data = myDataConnections[candidateId];\n          if (data && data.offer && !RTCPeerConnections[candidateId]) {\n            const offer = data.offer;\n            const connection = createNewConnection(localStream, candidateId);\n            RTCPeerConnections[candidateId] = connection;\n            connection.onicecandidate = e =>  {\n              updateCadidateArray(e.candidate, candidateId);\n            }\n            connection.onicegatheringstatechange = ev => {\n              updateICEGathering(ev.target.iceGatheringState, candidateId);\n            }\n            const remoteOffer = new RTCSessionDescription(offer);\n            await connection.setRemoteDescription(remoteOffer);\n            const answer = await connection.createAnswer()\n            await connection.setLocalDescription(answer);\n            await roomRef.update({\n              [`${myId}.${candidateId}`]: {\n                answer: {\n                  type: answer.type,\n                  sdp: answer.sdp\n                }\n              }\n            });\n            console.log('step 2: set offer created answer and updated answer');\n          }\n          if (data && data[`iceGatheringComplete_for_${myId}`] && data[`iceGatheringComplete_for_${candidateId}`]) {\n            // this is use to initiate trying candidate pairs\n            await roomRef.update({\n              [`${myId}.${candidateId}.try_canditate`]: 0,\n              [`${myId}.${candidateId}.iceGatheringComplete_for_${myId}`]: false,\n              [`${myId}.${candidateId}.iceGatheringComplete_for_${candidateId}`]: false,\n            });        \n          }\n          if (data && data[`try_canditate`] >= 0 && !data['try_canditate_start'] && !window.connectedCandidates.includes(candidateId)) {\n            const candidateIndex = data[`try_canditate`];\n            const iceCandidate = data[`candidate_for_${myId}`][candidateIndex];  \n            if (iceCandidate) {\n              const candidate = new RTCIceCandidate(iceCandidate);\n              await RTCPeerConnections[candidateId].addIceCandidate(candidate);\n              console.log('tried ', candidateIndex);\n            }\n            await roomRef.update({\n              [`${myId}.${candidateId}.try_canditate_start`]: true\n            }); \n          }\n        }\n        // search answer, consume answer and setRemoteDescription\n        for (const candidateId of Object.keys(RTCPeerConnections)) {\n          const connection = RTCPeerConnections[candidateId];\n          const data = snapshot.data()[candidateId][myId];\n          if (!connection.currentRemoteDescription && data && data.answer) {\n            const answer = new RTCSessionDescription(data.answer);\n            await connection.setRemoteDescription(answer);\n            console.log('Step 3: Got the answer and set the answer to remote');\n          }\n          if ( data && data[`try_canditate_start`] && !window.connectedCandidates.includes(candidateId)) {\n            const candidateIndex = data[`try_canditate`];\n            const iceCandidates = data[`candidate_for_${candidateId}`] || [];\n            for (const iceCandidate of iceCandidates) {\n              if (!window.connectedCandidates.includes(candidateId) && iceCandidate) {\n                const candidate = new RTCIceCandidate(iceCandidate);\n                await connection.addIceCandidate(candidate);\n                console.log('tried ', candidateIndex);\n              }\n            }\n            if (!window.connectedCandidates.includes(candidateId) && candidateIndex < data[`candidate_for_${myId}`].length) {\n              await roomRef.update({\n                [`${candidateId}.${myId}.try_canditate`]: candidateIndex + 1,\n                [`${candidateId}.${myId}.try_canditate_start`]: false\n              }); \n            }\n          }\n        }\n      }\n    });\n  }\n  init();\n  return (\n    <div id=\"room\">\n      <video id=\"localVideo\" muted autoPlay playsInline style={{width: '100%', maxWidth: '500px'}}></video>\n    </div>\n  );\n}","import { Button } from 'react-bootstrap';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Room from './room/Room';\nimport db from './firebase.config';\n\nfunction App() {\n  const roomId = window.location.search.split('=')[1];\n  if (roomId) {\n    return <Room/>\n  }\n  const createRoom = async () => {\n    const roomRef = await db.collection('rooms').add({});\n    window.location.href = `${window.location.href}?roomId=${roomRef.id}`\n  }\n  return (\n    <div className=\"App\">\n      <Button\n        variant=\"primary\"\n        onClick={createRoom}>\n        Create Room →\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}